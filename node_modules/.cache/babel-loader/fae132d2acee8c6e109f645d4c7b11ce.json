{"ast":null,"code":"// import React, { Component } from 'react';\n// import firebase from 'firebase';\n// import EventCard from './EventCard';\n// import GoDown from './GoDown';\n// import Swal from 'sweetalert2';\n// import './assets/css/EventCards.css';\n// class EventCards extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { \n//             events: null,\n//             cart: [],\n//             totalPayable: 0,\n//             payMethod: 'Online',\n//             comboAvailed: false,\n//             alertPopup: false\n//         }\n//     }\n//     componentDidMount = () => {\n//         firebase.database().ref('/events')\n//             .once('value').then((snapshot) => {\n//                 this.setState({events: snapshot.val()});                \n//             }).catch(e => console.log(e.code));\n//     }\n//     componentDidUpdate = () => {\n//         if (this.props.show && this.state.events === null) {\n//             window.location.reload();\n//         }\n//     }\n//     eventAddedListener = (eid) => {\n//         let event_regs = this.state.cart;\n//         event_regs.push(eid);\n//         let totPay = 0;\n//         let comboPrice = 0;\n//         event_regs.forEach(evid => {\n//             if(this.state.events[evid].fee === \"100\" || this.state.events[evid].fee === \"150\"){\n//                 if (comboPrice < 400){\n//                     comboPrice += Number(this.state.events[evid].fee);\n//                 }\n//                 else{\n//                     if(!this.state.comboAvailed){\n//                         this.setState({comboAvailed: true});\n//                         Swal.fire({\n//                             icon: 'success',\n//                             title: 'Combo Activated',\n//                             text: 'You\\'ve got a combo by selecting events of ₹150 and ₹100 worth ₹400+ you won\\'t be charged further for these categories during this purchase',\n//                             confirmButtonColor: '#A90C35'\n//                         })                         \n//                     }  \n//                 }\n//             }else {\n//                 totPay += Number(this.state.events[evid].fee);\n//             }\n//         })\n//         if (comboPrice > 400){\n//             comboPrice = 400;\n//             if(!this.state.comboAvailed){\n//                 this.setState({comboAvailed: true});\n//                 Swal.fire({\n//                     icon: 'success',\n//                     title: 'Combo Activated',\n//                     text: 'You\\'ve got a combo by selecting events of ₹150 and ₹100 worth ₹400+ you won\\'t be charged further for these categories during this purchase',\n//                     confirmButtonColor: '#A90C35'\n//                 })                         \n//             }\n//         }\n//         totPay += comboPrice;\n//         this.setState({cart: event_regs, totalPayable: totPay});\n//     }\n//     eventRemovedListener = (eid) => {\n//         let event_regs = this.state.cart;\n//         const index = event_regs.indexOf(eid);\n//         if (index > -1) {\n//             event_regs.splice(index, 1);\n//         }\n//         let totPay = 0;\n//         let comboPrice = 0;\n//         event_regs.forEach(evid => {\n//             if(this.state.events[evid].fee === \"100\" || this.state.events[evid].fee === \"150\"){\n//                 if (comboPrice < 400){\n//                     comboPrice += Number(this.state.events[evid].fee);\n//                 }\n//             }else {\n//                 totPay += Number(this.state.events[evid].fee);\n//             }\n//         })\n//         if (comboPrice > 400){\n//             comboPrice = 400;\n//         }\n//         totPay += comboPrice;\n//         this.setState({cart: event_regs, totalPayable: totPay});\n//     }\n//     togglePaymentHandler = () => {\n//         if (this.state.payMethod === 'Online') {\n//             this.setState({payMethod: 'At Desk'});\n//         }else {\n//             this.setState({payMethod: 'Online'});\n//         }\n//     }\n//     checkoutHandler = () => {\n//         if (this.state.cart.length !== 0) {\n//             firebase.database().ref('/participants/'+this.props.user.uid).once('value')\n//                 .then((snapshot) => {\n//                     let evs;\n//                     if (snapshot.val().events === undefined){\n//                         evs = this.state.cart;\n//                     }else{\n//                         evs = [...snapshot.val().events, ...this.state.cart];\n//                     }\n//                     firebase.database().ref('/participants/'+this.props.user.uid).update({\n//                         events: evs\n//                     }).then(() => {\n//                         let count = 0;\n//                         this.state.cart.forEach(eid => {\n//                             count++;\n//                             firebase.database().ref('/event_participation/'+eid).push({\n//                                 uid : this.props.user.uid,\n//                                 eventname: this.state.events[eid].eventname,\n//                                 timestamp: Date.now(),\n//                                 username: this.props.user.name\n//                             });\n//                             if (count === this.state.cart.length) {\n//                                 window.location.reload();\n//                             }\n//                         })\n//                     }).catch(e => console.log(e.message));\n//                 }).catch(em => console.log(em.message));     \n//         }else {\n//             Swal.fire({\n//                 icon: 'warning',\n//                 title: 'Oops...',\n//                 text: 'Select an event First',\n//                 confirmButtonColor: '#A90C35'\n//             })              \n//         }\n//     }\n//     render() { \n//         let dat = this.props.user !== null ? this.props.user.events : null;\n//         let nonRegisteredEvents = null;\n//         let registeredEvents = null;\n//         if (this.state.events !== null){\n//             nonRegisteredEvents = Object.keys(this.state.events)\n//                             .map(evKey => {\n//                                 if (dat !== null && dat !== undefined) {\n//                                     if (!dat.includes(evKey)) {\n//                                         return <EventCard\n//                                             registered={false} \n//                                             data={this.state.events[evKey]} \n//                                             key={evKey}\n//                                             eventAddedListener={this.eventAddedListener}\n//                                             eventRemovedListener={this.eventRemovedListener}/>\n//                                     }else {\n//                                         return null\n//                                     }\n//                                 }else {\n//                                     return <EventCard\n//                                             registered={false} \n//                                             data={this.state.events[evKey]} \n//                                             key={evKey}\n//                                             eventAddedListener={this.eventAddedListener}\n//                                             eventRemovedListener={this.eventRemovedListener}/>\n//                                 }   \n//                             });\n//             if (dat !== null && dat !== undefined) {\n//                 registeredEvents = dat.map(evKey => {\n//                     return <EventCard\n//                             registered={true} \n//                             data={this.state.events[evKey]} \n//                             key={evKey}\n//                             eventAddedListener={this.eventAddedListener}\n//                             eventRemovedListener={this.eventRemovedListener}/>\n//                 });\n//             }\n//         }\n//         return ( \n//             this.props.show ?\n//             <div className=\"EventCards\">\n//                 <div className=\"participant-data\">\n//                     <h4>{this.props.user !== null ? 'Hello '+this.props.user.name : ''}</h4>\n//                     {this.props.user !== null?\n//                     <h6>Your Dyuthi Id : <span className=\"non-dyuthi\"><b>{this.props.user.dyuthi_id}</b></span></h6>:\n//                     <></>}\n//                 </div>\n//                 <br/>\n//                 <br/>\n//                 <div class=\"container\">\n//                     <h4>Registered Events</h4>\n//                     <div class=\"row\">\n//                         {registeredEvents}\n//                     </div>\n//                     <br/><br/><br/>\n//                     <h4>Other Events</h4>\n//                     <div className=\"row\">\n//                         {nonRegisteredEvents}\n//                     </div>\n//                 </div>\n//                 <GoDown />\n//                 <div className=\"checkout-form\" id=\"bottom\">\n//                     <h3>Checkout</h3>\n//                     <p>Total Amount : {this.state.totalPayable}</p>\n//                     {/* <p>Payment Method : {this.state.payMethod}</p> */}\n//                     <p>Payment Method : At Desk</p>\n//                     {/* <div class=\"outer\">\n//                         <span class=\"switcher switcher-2\">\n//                             <input \n//                                 type=\"checkbox\" \n//                                 id=\"switcher-2\" \n//                                 onClick={this.togglePaymentHandler}/>\n//                             <label for=\"switcher-2\"></label>\n//                         </span>\n//                     </div>   */}\n//                     <p className=\"disclaimer\"></p>\n//                     <button class=\"proceed-button\" onClick={this.checkoutHandler}>Confirm Checkout</button>\n//                 </div>\n//             </div>\n//             : null\n//         );\n//     }\n// }\n// export default EventCards;","map":{"version":3,"sources":["/home/cracked/Desktop/Ascension XX/src/Components/EventCards.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n\n// import firebase from 'firebase';\n\n// import EventCard from './EventCard';\n// import GoDown from './GoDown';\n// import Swal from 'sweetalert2';\n// import './assets/css/EventCards.css';\n\n// class EventCards extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = { \n//             events: null,\n//             cart: [],\n//             totalPayable: 0,\n//             payMethod: 'Online',\n//             comboAvailed: false,\n//             alertPopup: false\n//         }\n//     }\n\n//     componentDidMount = () => {\n//         firebase.database().ref('/events')\n//             .once('value').then((snapshot) => {\n//                 this.setState({events: snapshot.val()});                \n//             }).catch(e => console.log(e.code));\n//     }\n\n//     componentDidUpdate = () => {\n//         if (this.props.show && this.state.events === null) {\n//             window.location.reload();\n//         }\n//     }\n\n//     eventAddedListener = (eid) => {\n//         let event_regs = this.state.cart;\n//         event_regs.push(eid);\n//         let totPay = 0;\n//         let comboPrice = 0;\n//         event_regs.forEach(evid => {\n//             if(this.state.events[evid].fee === \"100\" || this.state.events[evid].fee === \"150\"){\n//                 if (comboPrice < 400){\n//                     comboPrice += Number(this.state.events[evid].fee);\n//                 }\n//                 else{\n//                     if(!this.state.comboAvailed){\n//                         this.setState({comboAvailed: true});\n//                         Swal.fire({\n//                             icon: 'success',\n//                             title: 'Combo Activated',\n//                             text: 'You\\'ve got a combo by selecting events of ₹150 and ₹100 worth ₹400+ you won\\'t be charged further for these categories during this purchase',\n//                             confirmButtonColor: '#A90C35'\n//                         })                         \n//                     }  \n//                 }\n//             }else {\n//                 totPay += Number(this.state.events[evid].fee);\n//             }\n//         })\n//         if (comboPrice > 400){\n//             comboPrice = 400;\n//             if(!this.state.comboAvailed){\n//                 this.setState({comboAvailed: true});\n//                 Swal.fire({\n//                     icon: 'success',\n//                     title: 'Combo Activated',\n//                     text: 'You\\'ve got a combo by selecting events of ₹150 and ₹100 worth ₹400+ you won\\'t be charged further for these categories during this purchase',\n//                     confirmButtonColor: '#A90C35'\n//                 })                         \n//             }\n//         }\n//         totPay += comboPrice;\n//         this.setState({cart: event_regs, totalPayable: totPay});\n//     }\n\n//     eventRemovedListener = (eid) => {\n//         let event_regs = this.state.cart;\n//         const index = event_regs.indexOf(eid);\n//         if (index > -1) {\n//             event_regs.splice(index, 1);\n//         }\n//         let totPay = 0;\n//         let comboPrice = 0;\n//         event_regs.forEach(evid => {\n//             if(this.state.events[evid].fee === \"100\" || this.state.events[evid].fee === \"150\"){\n//                 if (comboPrice < 400){\n//                     comboPrice += Number(this.state.events[evid].fee);\n//                 }\n//             }else {\n//                 totPay += Number(this.state.events[evid].fee);\n//             }\n//         })\n//         if (comboPrice > 400){\n//             comboPrice = 400;\n//         }\n//         totPay += comboPrice;\n//         this.setState({cart: event_regs, totalPayable: totPay});\n//     }\n\n//     togglePaymentHandler = () => {\n//         if (this.state.payMethod === 'Online') {\n//             this.setState({payMethod: 'At Desk'});\n//         }else {\n//             this.setState({payMethod: 'Online'});\n//         }\n//     }\n\n//     checkoutHandler = () => {\n//         if (this.state.cart.length !== 0) {\n//             firebase.database().ref('/participants/'+this.props.user.uid).once('value')\n//                 .then((snapshot) => {\n//                     let evs;\n//                     if (snapshot.val().events === undefined){\n//                         evs = this.state.cart;\n//                     }else{\n//                         evs = [...snapshot.val().events, ...this.state.cart];\n//                     }\n//                     firebase.database().ref('/participants/'+this.props.user.uid).update({\n//                         events: evs\n//                     }).then(() => {\n//                         let count = 0;\n//                         this.state.cart.forEach(eid => {\n//                             count++;\n//                             firebase.database().ref('/event_participation/'+eid).push({\n//                                 uid : this.props.user.uid,\n//                                 eventname: this.state.events[eid].eventname,\n//                                 timestamp: Date.now(),\n//                                 username: this.props.user.name\n//                             });\n//                             if (count === this.state.cart.length) {\n//                                 window.location.reload();\n//                             }\n//                         })\n//                     }).catch(e => console.log(e.message));\n//                 }).catch(em => console.log(em.message));     \n//         }else {\n//             Swal.fire({\n//                 icon: 'warning',\n//                 title: 'Oops...',\n//                 text: 'Select an event First',\n//                 confirmButtonColor: '#A90C35'\n//             })              \n//         }\n//     }\n\n//     render() { \n//         let dat = this.props.user !== null ? this.props.user.events : null;\n//         let nonRegisteredEvents = null;\n//         let registeredEvents = null;\n//         if (this.state.events !== null){\n//             nonRegisteredEvents = Object.keys(this.state.events)\n//                             .map(evKey => {\n//                                 if (dat !== null && dat !== undefined) {\n//                                     if (!dat.includes(evKey)) {\n//                                         return <EventCard\n//                                             registered={false} \n//                                             data={this.state.events[evKey]} \n//                                             key={evKey}\n//                                             eventAddedListener={this.eventAddedListener}\n//                                             eventRemovedListener={this.eventRemovedListener}/>\n//                                     }else {\n//                                         return null\n//                                     }\n//                                 }else {\n//                                     return <EventCard\n//                                             registered={false} \n//                                             data={this.state.events[evKey]} \n//                                             key={evKey}\n//                                             eventAddedListener={this.eventAddedListener}\n//                                             eventRemovedListener={this.eventRemovedListener}/>\n//                                 }   \n//                             });\n//             if (dat !== null && dat !== undefined) {\n//                 registeredEvents = dat.map(evKey => {\n//                     return <EventCard\n//                             registered={true} \n//                             data={this.state.events[evKey]} \n//                             key={evKey}\n//                             eventAddedListener={this.eventAddedListener}\n//                             eventRemovedListener={this.eventRemovedListener}/>\n//                 });\n//             }\n//         }\n        \n//         return ( \n//             this.props.show ?\n//             <div className=\"EventCards\">\n//                 <div className=\"participant-data\">\n//                     <h4>{this.props.user !== null ? 'Hello '+this.props.user.name : ''}</h4>\n//                     {this.props.user !== null?\n//                     <h6>Your Dyuthi Id : <span className=\"non-dyuthi\"><b>{this.props.user.dyuthi_id}</b></span></h6>:\n//                     <></>}\n//                 </div>\n//                 <br/>\n//                 <br/>\n\n                \n//                 <div class=\"container\">\n//                     <h4>Registered Events</h4>\n//                     <div class=\"row\">\n//                         {registeredEvents}\n//                     </div>\n//                     <br/><br/><br/>\n//                     <h4>Other Events</h4>\n//                     <div className=\"row\">\n//                         {nonRegisteredEvents}\n//                     </div>\n//                 </div>\n//                 <GoDown />\n//                 <div className=\"checkout-form\" id=\"bottom\">\n//                     <h3>Checkout</h3>\n//                     <p>Total Amount : {this.state.totalPayable}</p>\n//                     {/* <p>Payment Method : {this.state.payMethod}</p> */}\n//                     <p>Payment Method : At Desk</p>\n//                     {/* <div class=\"outer\">\n//                         <span class=\"switcher switcher-2\">\n//                             <input \n//                                 type=\"checkbox\" \n//                                 id=\"switcher-2\" \n//                                 onClick={this.togglePaymentHandler}/>\n//                             <label for=\"switcher-2\"></label>\n//                         </span>\n//                     </div>   */}\n//                     <p className=\"disclaimer\"></p>\n//                     <button class=\"proceed-button\" onClick={this.checkoutHandler}>Confirm Checkout</button>\n//                 </div>\n//             </div>\n//             : null\n//         );\n//     }\n// }\n \n// export default EventCards;"]},"metadata":{},"sourceType":"module"}