{"version":3,"sources":["images/logo.png","logo.svg","Nav.js","CountDown.js","Logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","CountDown","state","days","hours","minutes","seconds","updateTimer","bind","className","this","setInterval","now","Date","diff","parseInt","setState","Logo","classNames","props","size","src","logo","App","href","dyuthi","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,yECA3CD,EAAOC,QAAU,IAA0B,kC,iNCGzBC,IAAMC,U,eC4DTC,G,kBA1DX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,GAEb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARV,E,sEAWT,OACI,yBAAKC,UAAU,SACX,8BAAOC,KAAKR,MAAMC,MADtB,IAEI,8BAAOO,KAAKR,MAAME,OAFtB,IAGI,8BAAOM,KAAKR,MAAMG,SAHtB,IAII,8BAAOK,KAAKR,MAAMI,Y,0CAK1BK,YAAaD,KAAKH,YAAa,O,oCAI/B,IAAIK,EAAM,IAAIC,KAEVC,EADS,IAAID,KAAK,gBACJD,EACdT,EAAOY,SAAUD,EAAI,OACzBA,GAAW,MACX,IAAIV,EAAQW,SAASD,EAAI,MACzBA,GAAW,KACX,IAAIT,EAAUU,SAASD,EAAI,KAC3BA,GAAW,IACX,IAAIR,EAAUS,SAASD,EAAO,KAE3BX,EAAK,KACJA,EAAO,IAAMA,GAEdC,EAAM,KACLA,EAAQ,IAAMA,GAEfC,EAAQ,KACPA,EAAU,IAAMA,GAEjBC,EAAQ,KACPA,EAAU,IAAMA,GAGpBI,KAAKM,SAAS,CACVb,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,QAASA,Q,GAtDGP,IAAMC,YCsBfiB,G,uLApBX,IAAIC,EAAa,QACjB,OAAOR,KAAKS,MAAMC,MACd,KAAK,EACDF,GAAc,aACd,MACJ,KAAK,EACDA,GAAc,cACd,MACJ,KAAK,EACDA,GAAc,aACd,MACJ,QACIA,GAAc,eAEpB,OACE,yBAAKG,IAAKC,IAAMb,UAAWS,Q,GAjBhBnB,IAAMC,YC6CVuB,G,kBAzCX,aAAc,IAAD,8BACT,+CACKrB,MAAQ,CACTC,KAAM,GAEV,EAAKI,YAAc,EAAKA,YAAYC,KAAjB,gBALV,E,sEAQT,OACI,yBAAKC,UAAU,QACf,kBAAC,EAAD,CAAMW,KAAM,IACZ,wBAAIX,UAAU,SAASC,KAAKR,MAAMC,KAAlC,eAEA,kBAAC,EAAD,MAEA,0BAAMM,UAAU,cAAhB,kBAEI,6BACA,0BAAMA,UAAU,QAAhB,4CACA,6BACA,0BAAMA,UAAU,SACZ,uBAAGe,KAAK,yCAAR,oB,0CAOZd,KAAKH,gB,oCAGL,IAAIK,EAAM,IAAIC,KACVY,EAAS,IAAIZ,KAAK,gBAElBV,EAAOY,UADAU,EAAOb,GACO,OACzBF,KAAKM,SAAS,CACVb,KAAMA,Q,GArCAJ,IAAMC,YCKJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3e8c9d39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e22fa062.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './css/nav.css';\n\nclass Nav extends React.Component {\n  render(){\n      return (\n        <nav className=\"nav\">\n            <ul>\n                <li>HOME</li>\n                <li>ABOUT</li>\n                <li>PRO SHOWS</li>\n                <li>EVENTS</li>\n                <li>CONTACT</li>\n            </ul>\n        </nav>\n      )\n    }\n}\n\nexport default Nav;\n","import React from 'react';\nimport logo from './images/logo.png';\nimport './css/countdown.css';\n\nclass CountDown extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            days: 0,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        };\n        this.updateTimer = this.updateTimer.bind(this);\n    }\n    render(){\n        return (\n            <div className=\"timer\">\n                <span>{this.state.days}</span>:\n                <span>{this.state.hours}</span>:\n                <span>{this.state.minutes}</span>:\n                <span>{this.state.seconds}</span> \n            </div>\n        )\n    }\n    componentDidMount(){\n        setInterval( this.updateTimer, 1000);\n    }\n\n    updateTimer(){\n        var now = new Date();\n        var dyuthi = new Date(\"Feb 20, 2020\");\n        var diff = dyuthi-now;\n        var days = parseInt( diff / (24*60*60*1000 ))\n        diff = diff % (24*60*60*1000)\n        var hours = parseInt(diff / (60*60*1000))\n        diff = diff % (60*60*1000)\n        var minutes = parseInt(diff / (60*1000))\n        diff = diff % (60*1000)\n        var seconds = parseInt(diff / 1000)\n\n        if(days<10){\n            days = \"0\" + days;\n        }\n        if(hours<10){\n            hours = \"0\" + hours;\n        }\n        if(minutes<10){\n            minutes = \"0\" + minutes;\n        }\n        if(seconds<10){\n            seconds = \"0\" + seconds;\n        }\n\n        this.setState({\n            days: days,\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n        });\n    }\n}\n\nexport default CountDown;\n","import React from 'react';\nimport logo from './images/logo.png';\nimport './css/logo.css';\n\nclass Logo extends React.Component {\n  render(){\n    var classNames = \"logo \";\n    switch(this.props.size){\n        case 0:\n            classNames += \"logo-small\";\n            break;\n        case 1:\n            classNames += \"logo-medium\";\n            break;\n        case 2:\n            classNames += \"logo-large\";\n            break;\n        default:\n            classNames += \"logo-default\";\n      }\n      return (\n        <img src={logo} className={classNames} />\n      )\n    }\n}\n\nexport default Logo;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Nav from './Nav';\nimport CountDown from './CountDown';\nimport Logo from './Logo';\nimport './css/app.css';\n\nclass App extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            days: 0\n        };\n        this.updateTimer = this.updateTimer.bind(this);\n    }\n    render(){\n        return (\n            <div className=\"main\">\n            <Logo size={1}/>\n            <h1 className=\"title\">{this.state.days} days to go</h1>\n\n            <CountDown/>\n\n            <span className=\"event-date\">\n                Feb 20 21 22 23\n                <br/>\n                <span className=\"gect\">Government Engineering College, Thrissur</span>\n                <br/>\n                <span className=\"insta\">\n                    <a href=\"https://www.instagram.com/dyuthilive/\">@dyuthilive</a>\n                </span>\n            </span>\n            </div>\n        );\n    }\n    componentDidMount(){\n        this.updateTimer();\n    }\n    updateTimer(){\n        var now = new Date();\n        var dyuthi = new Date(\"Feb 20, 2020\");\n        var diff = dyuthi-now;\n        var days = parseInt( diff / (24*60*60*1000 ))\n        this.setState({\n            days: days\n        });\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}